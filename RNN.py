# -*- coding: utf-8 -*-
"""Untitled7.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NISkja98dije2muXVOUXuOK6sgC8tIoH
"""

import numpy as np

import pandas as pd

import keras

from keras.layers import LSTM

from keras.layers import *

from keras.layers import Dense

from keras.layers import Dropout

from keras.models import Sequential

from keras.callbacks import EarlyStopping

import math

import matplotlib.pyplot as plt

from sklearn.model_selection import train_test_split

from sklearn.preprocessing import MinMaxScaler

from sklearn.metrics import mean_absolute_error

from sklearn.metrics import mean_squared_error

TwitterStock = pd.read_csv("/content/drive/My Drive/TWTR.csv")

TwitterStock

TwitterStock.head(10)
#Training/Testing of the vals using .iloc from the pandas df.
training = TwitterStock.iloc[:800, 1:2].values
testing = TwitterStock.iloc[800:, 1:2].values
#Usng MinMaxScaler from sklearn for preprocessing and scaling each feature.
sc = MinMaxScaler(feature_range = (0, 1))
fitted_Training = sc.fit_transform(training)
#Implementing sklearn to create the design matrix of the training set, as well as the label vector.
X_train = []
y_train = []
#Making the structure with 60 number of time-steps as well as only 1 output
for i in range(60, 500):
    X_train.append(fitted_Training[i-50:i, 0])
    y_train.append(fitted_Training[i, 0])
X_train, y_train = np.array(X_train), np.array(y_train)
#Reshaping the matrix.
X_train = np.reshape(X_train, (X_train.shape[0], X_train.shape[1], 1))
#Using a Sequential model which is  used for layers with one input and output tensor.
model = Sequential()
#LSTM model from Keras requires a set of arguments that are parsed through to create the model, In this case these are the most logical for creating a time series over Twitter.
model.add(LSTM(units = 50, return_sequences = True, input_shape = (X_train.shape[1], 1)))
model.add(Dropout(0.2))
model.add(LSTM(units = 50, return_sequences = True))
model.add(Dropout(0.2))
model.add(LSTM(units = 50, return_sequences = True))
model.add(Dropout(0.2))
model.add(LSTM(units = 50))
model.add(Dropout(0.2))
model.add(Dense(units = 1))
#Compling using optimizxer adam and displaying the Mean Squared Error using loss=.
model.compile(optimizer = 'adam', loss = 'mean_squared_error')

model.fit(X_train, y_train, epochs=20, verbose=1, shuffle=True, validation_split=0.5)
#Retraining and retesting with same .iloc vals.
reTrain = TwitterStock.iloc[:800, 1:2]
reTest = TwitterStock.iloc[800:, 1:2]
#Preparing the test data by reshaping it.
newSet = pd.concat((reTrain,reTest), axis = 0)

inputs = newSet[len(newSet) - len(reTest) - 60:].values
inputs = inputs.reshape(-1,1)
inputs = sc.transform(inputs)

X_test = []

for i in range(60, 519):
    X_test.append(inputs[i-50:i, 0])
#new array from x_test.
X_test = np.array(X_test)
#Reshaping the array with new x_test values.
X_test = np.reshape(X_test, (X_test.shape[0], X_test.shape[1], 1))
#Prediction of the model using test data.
prediction = model.predict(X_test)
#Using MinMaxScaler's inverse function to recreate prediction results.
prediction = sc.inverse_transform(prediction)
#Table of average stock prices from 2018-now.
Avg = {'Date': ['2018','2019','2020(Q4)'],
        'AverageStockPrice': [32.8285,35.5754,35.2100]
}

df2 = pd.DataFrame(Avg, columns = ['Date', 'AverageStockPrice'])

print(df2)
#Table of lowest stock prices from 2018-now.
Low = {'Date': ['2018','2019','2020(Q4)'],
        'LowestStockPrice': [22.1600,27.9900,20.0000]
}

df3 = pd.DataFrame(Low, columns = ['Date', 'LowestStockPrice'])

print(df3)
#Creating a .plot from matplotlib to plot the new dataset vs the predicted dataset of the stock prices from 2018 to 2020.
plt.plot(df.loc[800:, 'Date'],reTest.values, color = 'black', label = 'Current Twitter Stock Price')
plt.plot(df.loc[800:, 'Date'],prediction, color = 'red', label = 'Predicted Twitter Stock Price')
plt.legend()
plt.title('Twitter Stock Price Over Time')
plt.ylabel('Current Twitter Stock Price')
plt.xlabel('Date')
plt.xticks(np.arange(0,459,150))
plt.show()